HashMap Exercises (Create package "HashMapExercises" and work in there)
Note! Write all solutions in separate methods(not in main), main method should not exist

1. Write a Java program to associate the specified value with the specified key in a HashMap.

2. Write a Java program to count the number of key-value (size) mappings in a map.

3. Write a Java program to remove all the mappings from a map.

5. Write a Java program to check whether a map empty or not.

6. Write a Java program to test if a map contains a mapping for the specified key.

8. Write a Java program to test if a map contains a mapping for the specified value.

9. Write a Java program to create a set view of the mappings contained in a map (Print all key-values).

10. Write a Java program to get the value of a specified key in a map.

11. Write a Java program to get a set view of the keys contained in this map (Print all keys)

12. Write a Java program to get a collection view of the values contained in this map (Print all values)

---------------------------------------------------------------------------------------------------------------

PriorityQueue Exercises (Create package "PriorityQueueExercises" and work in there)
Note! Write all solutions in separate methods(not in main), main method should not exist

1. Write a Java program to create a new priority queue, add some colors (string) and print out the elements of the priority queue.

2. Write a Java program to iterate through all elements in priority queue.

3. Write a Java program to add all the elements of a priority queue to another priority queue.

4. Write a Java program to insert a given element into a priority queue.

5. Write a Java program to remove all the elements from a priority queue.

6. Write a Java program to count the number of elements in a priority queue.

7. Write a Java program to compare two priority queues.

8. Write a Java program to get the first element of the priority queue.

9. Write a Java program to get and remove the first element.

10. Write a Java program to convert a priority queue to an array containing all the elements of the queue.

11. Write a Java program to convert a Priority Queue elements to a string and print them.

---------------------------------------------------------------------------------------------------------------

TreeMap Exercises (Create package "TreeMapExercises" and work in there)
Note! Write all solutions in separate methods(not in main), main method should not exist

1. Write a Java program to associate the specified value with the specified key in a Tree Map.

2. Write a Java program to copy a Tree Map content to another Tree Map.

3. Write a Java program to search a key in a Tree Map.

4. Write a Java program to search a value in a Tree Map.

5. Write a Java program to get all keys from the given a Tree Map.

6. Write a Java program to delete all elements from a given Tree Map.

7. Write a Java program to sort keys in Tree Map by using comparator.

8. Write a Java program to get the first (lowest) key and the last (highest) key currently in a map.

9. Write a Java program to get a reverse order view of the keys contained in a given map.

10. Write a Java program to get the portion of a map whose keys are strictly less than a given key.

11. Write a Java program to get the portion of this map whose keys are less than (or equal to, if inclusive is true) a given key.

12. Write a Java program to get the least key strictly greater than the given key. Return null if there is no such key.

13. Write a Java program to get a key-value mapping associated with the greatest key strictly less than the given key.

14. Write a Java program to get the greatest key strictly less than the given key. Return null if there is no such key.

15. Write a Java program to remove and get a key-value mapping associated with the least key in a map.

16. Write a Java program to remove and get a key-value mapping associated with the greatest key in this map.

17. Write a Java program to get the least key greater than or equal to the given key. Returns null if there is no such key.

---------------------------------------------------------------------------------------------------------------

LinkedList Exercises (Create package "LinkedListExercises" and work in there)
Note! Write all solutions in separate methods(not in main), main method should not exist

1. Write a Java program to append the specified element to the end of a linked list.

2. Write a Java program to iterate through all elements in a linked list.

3. Write a Java program to iterate through all elements in a linked list starting at the specified position.

4. Write a Java program to iterate a linked list in reverse order.

5. Write a Java program to insert the specified element at the specified position in the linked list.

6. Write a Java program to insert elements into the linked list at the first and last position.

7. Write a Java program to insert the specified element at the front of a linked list.

8. Write a Java program to insert the specified element at the end of a linked list.

11. Write a Java program to display the elements and their positions in a linked list.

12. Write a Java program to remove a specified element from a linked list.

13. Write a Java program to remove first and last element from a linked list.

14. Write a Java program to remove all the elements from a linked list.

15. Write a Java program of swap two elements in a linked list.

17. Write a Java program to join two linked lists.

18. Write a Java program to clone a linked list to another linked list.

19. Write a Java program to remove and return the first element of a linked list.

22. Write a Java program to check if a particular element exists in a linked list.

23. Write a Java program to convert a linked list to array list.

24. Write a Java program to compare two linked lists.

25. Write a Java program to test a linked list is empty or not.

26. Write a Java program to replace an element in a linked list.